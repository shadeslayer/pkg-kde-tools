#!/usr/bin/perl

use strict;
use warnings;

use Debian::PkgKde;
use Getopt::Long;
use File::Copy qw();

eval "use URI; use URI::QueryParam";
if ($@) {
    error "in order to use this utility, you have to install liburi-perl package";
}

sub usage {
    usageerr "[ -d destdir ] [ -v version ] [ -a arch ] [ package ] [ distribution ]";
}

sub construct_url {
    my ($path, %params) = @_;

    my $url = URI->new($path);
    foreach my $param (keys %params) {
	my @value = (ref $params{$param} eq "ARRAY") ?
	    @{$params{$param}} : ( $params{$param} );
	$url->query_param_append($param, @value);
    }
    return $url->as_string();
}

sub as_array {
    my $scalar = shift;
    my @ret;
    if (defined $scalar) {
	if (ref($scalar) eq 'ARRAY') {
	    @ret = @$scalar;
	} else {
	    push @ret, $scalar;
	}
    }
    return @ret;
}

sub get_command_output {
    my @lines;
    open(my $cmd, "-|", @_) or syserr("unable to execute command %s", $_[0]);
    while (<$cmd>) {
	chop;
	push @lines, $_;
    }
    close $cmd;
    return @lines;
}

sub get_rfc822_field_value {
    my ($field, $input) = @_;
    foreach my $line (@$input) {
	if ($line =~ /^\Q$field\E:\s*(.*)$/) {
	    return "$1"
	}
    }
}

sub download_logs {
    my ($destdir, $pkg, %opts) = @_;
    my $distro = $opts{distro};
    my $url;

    # Construct URL
    if (defined $distro) {
        $url = construct_url('https://buildd.debian.org/pkg.cgi',
	    pkg => $pkg, dist => $distro, arch => [ as_array($opts{arch}) ]);
    } elsif (defined $opts{ver}) {
        $url = construct_url('https://buildd.debian.org/build.cgi',
	    pkg => $pkg, ver => [ as_array($opts{ver}) ],
	    arch => [ as_array($opts{arch}) ])
    } else {
	error "neither version(s) nor distribution was specified";
    }

    # Download
    info "Downloading referenced build logs from $url ...";
    if (system("wget", "-e", "robots=off", "--timestamping", "--no-directories",
        "--directory-prefix=$destdir", "--recursive", "--level=1", "--no-parent",
        "--accept", "fetch.cgi*", $url) != 0)
    {
	error "problems downloading (wget'ing) build logs";
    }
}

sub rename_logs {
    my ($destdir, $pkg) = @_;
    my %rename;
    if (opendir(my $dir, $destdir)) {
	while (my $file = readdir($dir)) {
	    my $newname;
	    if ($file =~ /^fetch\.cgi\?.*pkg=$pkg/) {
		$newname = $file;
		$newname =~ s/fetch\.cgi//;
		$newname =~ s/[?;&][^=]+=([^?;&]+)/_$1/g;
		$newname =~ s/^_//;
		$newname =~ s/$/.build/;
		$rename{$file} = $newname;
	    }
	}
	closedir($dir);
    }

    foreach my $file (keys %rename) {
	my $newname = $rename{$file};
	File::Copy::move("$destdir/$file", "$destdir/$newname") or
	    error "unable to rename '%s' to '%s'", $file, $newname;
    }

    return values %rename;
}

my $opt_destdir;
my @opt_versions;
my @opt_archs;

# Get and verify options
unless (GetOptions(
	"destdir|d=s" => \$opt_destdir,
	"version|v=s" => \@opt_versions,
	"arch|a=s" => \@opt_archs))
{
    usage();
}

my ($opt_package, $opt_distro) = @ARGV;
my @dpkg_parsechangelog;

if (!$opt_package && -f "debian/changelog") {
    @dpkg_parsechangelog = get_command_output("dpkg-parsechangelog");
    $opt_package = get_rfc822_field_value("Source", \@dpkg_parsechangelog);
}

if (!$opt_package) {
    errormsg "source package was not specified and could not be autoguessed";
    usage();
}

if ($opt_distro && @opt_versions) {
    errormsg "version and distribution options are mutually exclusive";
    usage();
}

if (!@opt_versions) {
    if (!$opt_distro && -f "debian/changelog") {
	@dpkg_parsechangelog = get_command_output("dpkg-parsechangelog") unless @dpkg_parsechangelog;
	$opt_distro = get_rfc822_field_value("Distribution", \@dpkg_parsechangelog);
	if ($opt_distro eq "UNRELEASED") {
	    # Get distro from the next to current entry
	    $opt_distro = get_rfc822_field_value("Distribution",
		[ get_command_output("dpkg-parsechangelog", "-c1", "-o1") ]);
	}
    }
    if (!$opt_distro) {
	errormsg "neither distribution nor version(s) was specified and could not be autoguessed";
	usage();
    }
}

# Determine destination directory to store logs
unless ($opt_destdir) {
    $opt_destdir = sprintf("%s_%s_logs", $opt_package,
	($opt_distro) ? $opt_distro : $opt_versions[0]);
}

info("Selected output directory for logs: %s/", $opt_destdir);
unless (-d $opt_destdir) {
    mkdir $opt_destdir;
}

download_logs($opt_destdir, $opt_package,
    distro => $opt_distro, ver => \@opt_versions, arch => \@opt_archs);

if (my @logs = rename_logs($opt_destdir, $opt_package)) {
    info "Downloaded build logs (stored to %s):", $opt_destdir;
    printmsg "  - %s", $_ foreach @logs;
} else {
    error "no build logs have been downloaded";
}

END {
    rmdir $opt_destdir if $opt_destdir && $opt_destdir ne ".";
}

exit 0

# vim: noexpandtab tabstop=8 shiftwidth=4
